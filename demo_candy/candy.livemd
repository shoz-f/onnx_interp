# Fast Neural Style Transfer

```elixir
File.cd!(__DIR__)
# for windows JP
System.shell("chcp 65001")

Mix.install([
  {:onnx_interp, "~> 0.1.8"},
  {:cimg, "~> 0.1.14"},
  {:kino, "~> 0.7.0"}
])
```

## 0.Original work

Fast Neural Style Transfer

* https://github.com/onnx/models/tree/main/vision/style_transfer/fast_neural_style

fast-neural-style in PyTorch

* https://github.com/pytorch/examples/tree/main/fast_neural_style

***Thanks a lot!!!***

---

## Implementation with OnnxInterp in Elixir

```elixir
defmodule Candy do
  alias OnnxInterp, as: NNInterp

  use NNInterp,
    model: "./model/candy-9.onnx",
    url:
      "https://github.com/onnx/models/raw/main/vision/style_transfer/fast_neural_style/model/candy-9.onnx"

  def apply(img) do
    input0 =
      img
      |> CImg.resize({224, 224})
      |> CImg.to_binary([{:dtype, "<f4"}, {:range, {0.0, 255.0}}, :nchw])

    output0 =
      session()
      |> NNInterp.set_input_tensor(0, input0)
      |> NNInterp.invoke()
      |> NNInterp.get_output_tensor(0)

    CImg.from_binary(output0, 224, 224, 1, 3, [{:dtype, "<f4"}, {:range, {0.0, 255.0}}, :nchw])
  end
end
```

Launch `Candy`.

```elixir
# OnnxInterp.stop(Candy)
Candy.start_link([])
```

## 3.Let's try it

Load a photo and apply Candy to it.

```elixir
filename = "flog.jpg"

CImg.load(filename)
# display the image.
|> tap(fn img -> Kino.render(CImg.resize(img, {224, 224}) |> CImg.display_kino(:jpeg)) end)

# inference.
|> Candy.apply()
|> CImg.display_kino(:jpeg)
```

## 4.TIL ;-)

&#9633;
